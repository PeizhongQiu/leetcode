/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<int> nodeLevel;
        queue<Node*> level;
        level.push(root);
        vector<vector<int> > result;
        if(root==NULL) return result;
        int index=0;
        nodeLevel.push_back(0);
        Node* temp=level.front();
        while(!level.empty()){
            temp=level.front();
            if(result.size()<=nodeLevel[index]){
                vector<int> node_v={temp->val};
                result.push_back(node_v);
            }
            else{
                result[nodeLevel[index]].push_back(temp->val);
            }
            for(int i=0;i<temp->children.size();i++){
                level.push(temp->children[i]);
                nodeLevel.push_back(nodeLevel[index]+1);
            }
            level.pop();
            index++;
        }
        return result;

    }
};
