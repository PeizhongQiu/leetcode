/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    vector<int> v_output;
    int index;
    BSTIterator(TreeNode* root) {
        this->index=0;
        TreeNode* temp = root;
        stack<TreeNode*> output; 
        
        while(temp||!output.empty()){
            while(temp){
                output.push(temp);
                temp=temp->left;
            }
            temp=output.top();
            this->v_output.push_back(temp->val);
            output.pop();
            temp=temp->right;
        }
    }
    
    /** @return the next smallest number */
    int next() {
        return this->v_output[this->index++];
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if(this->index==this->v_output.size()) return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
